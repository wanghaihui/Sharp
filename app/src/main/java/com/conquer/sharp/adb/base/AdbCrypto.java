package com.conquer.sharp.adb.base;

/**
 * This class encapsulates(封装) the ADB cryptography(密码学) functions and provides
 * an interface for the storage(存储) and retrieval(取回) of keys.
 */

import java.math.BigInteger;
import java.security.KeyPair;
import java.security.interfaces.RSAPublicKey;

/**
 * RSA加密算法
 * 非对称加密算法
 */
public class AdbCrypto {
    /** An RSA keypair encapsulated by the AdbCrypto object */
    /* a public key and a private key */
    private KeyPair keyPair;

    /** The base 64 conversion interface to use */
    private AdbBase64 base64;

    /** The ADB RSA key length in bits */
    public static final int KEY_LENGTH_BITS = 2048;

    /** The ADB RSA key length in bytes */
    public static final int KEY_LENGTH_BYTES = KEY_LENGTH_BITS / 8;

    /** The ADB RSA key length in words */
    public static final int KEY_LENGTH_WORDS = KEY_LENGTH_BYTES / 4;

    /** The RSA signature padding as an int array */
    // 236
    public static final int[] SIGNATURE_PADDING_AS_INT = new int[] {
        0x00,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
        0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x30,0x21,0x30,
        0x09,0x06,0x05,0x2b,0x0e,0x03,0x02,0x1a,0x05,0x00,0x04,0x14
    };

    /** The RSA signature padding as a byte array */
    public static byte[] SIGNATURE_PADDING;

    static {
        SIGNATURE_PADDING = new byte[SIGNATURE_PADDING_AS_INT.length];
        for (int i = 0; i < SIGNATURE_PADDING.length; i++) {
            SIGNATURE_PADDING[i] = (byte) SIGNATURE_PADDING_AS_INT[i];
        }
    }

    /**
     * Converts a standard RSAPublicKey object to the special ADB format
     * @param pubkey RSAPublicKey object to convert
     * @return Byte array containing the converted RSAPublicKey object
     */
    private static byte[] convertRsaPublicKeyToAdbFormat(RSAPublicKey pubkey) {
        /*
         * ADB literally(字面上) just saves the RSAPublicKey struct to a file.
         *
         * typedef struct RSAPublicKey {
         *   int len; // Length of n[] in number of uint32_t
         *   uint32_t n0inv;  // -1 / n[0] mod 2^32
         *   uint32_t n[RSANUMWORDS]; // modulus as little endian array
         *   uint32_t rr[RSANUMWORDS]; // R^2 as little endian array
         *   int exponent; // 3 or 65537
         * } RSAPublicKey;
         */

        /* ------ This part is a Java-ified(Java化) version of RSA_to_RSAPublicKey from adb_host_auth.c ------ */
        BigInteger r32, n;

        r32 = BigInteger.ZERO.setBit(32);
        n = pubkey.getModulus();


        return null;
    }
}
